PostCSS is a post-processor

=

How does a post-processor differs from a pre-processor?

=

A pre-processor takes any language and outputs CSS

    +------------------+           +------------------+
    |                  |           |                  |
    |   • SASS         |        \  |                  |
    |   • LESS         | --------> |       CSS        |
    |   • etc          |        /  |                  |
    |                  |           |                  |
    +------------------+           +------------------+

=

A post-processor takes in CSS and outputs anything (including CSS).


    +------------------+           +------------------+
    |                  |           |                  |
    |                  |        \  |     • CSSS       |
    |       CSS        | --------> |     • JS         |
    |                  |        /  |     • etc        |
    |                  |           |                  |
    +------------------+           +------------------+

=

PostCSS at its core is a

- CSS Parser
- An AST for CSS
- Helpers to manipulate the AST
- A pretty-printer

=

Its value is in providing a common framework to write composable plugins to manipulate CSS as one sees fit.

=

There are plugins for
- Variable interpolation
- Vendor Prefixes
- CSS modules
- etc (http://postcss.parts/)

=

So what is an AST?

=

Abstract syntax tree

=


# Why abstract syntax?

var x = 1

var    x    = 1;

maps to the same AST

=

Because it presents the code as a data structure it is easier to modify than code as text.

=

# Examples of types of nodes used by PostCSS
=

Root

The root node represents a CSS file and contains all its parsed nodes.

=

Rule

Represents a CSS rule: a selector followed by a declaration block.
Has 'selectors' and 'declarations' as attributes.

=

Has selectors


=

Declaration

color: black'

=

{
  "type"  : "declaration",
  "prop"  : "color,
  "value" : "black",
}

=

We can inspect what AST a CSS file maps to with [AST Explorer](http://astexplorer.net/#/2uBU1BLuJ1)

=

What AST Walkers

=

They abstract the details of walking through the graph for us

=

# examples

walkDeclarations
walkRules
..

=

PostCSS also comes with helpers to modify the AST

=

append
insertAfter
clone

=

We have a simple variable interpolation plugin to demostrate its use